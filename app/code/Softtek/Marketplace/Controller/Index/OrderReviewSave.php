<?php
/**
 * @category   Softtek
 * @package    Softtek_Marketplace
 * @author     yordan@softtek.com
 * @copyright  This file was generated by using Module Creator(http://code.vky.co.in/magento-2-module-creator/) provided by VKY <viky.031290@gmail.com>
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

namespace Softtek\Marketplace\Controller\Index;

use Magento\Framework\App\Action\Action;
use Magento\Framework\App\Action\Context;
use Softtek\Marketplace\Model\OrderReviewFactory;
use Magento\Customer\Model\Session as CustomerSession;
use Magento\Store\Model\StoreManagerInterface;
use Purpletree\Marketplace\Model\ResourceModel\Seller;
use Magento\Framework\Controller\Result\ForwardFactory;
use Magento\Framework\View\Result\PageFactory;
use Purpletree\Marketplace\Model\ResourceModel\Sellerorder;
use Purpletree\Marketplace\Helper\Data;
use Magento\Sales\Api\OrderRepositoryInterface;
use Magento\Sales\Model\Order\Email\Sender\OrderCommentSender;
use Purpletree\Marketplace\Model\ResourceModel\Sellerorder\CollectionFactory;
use Magento\Framework\Translate\Inline\StateInterface;
use Magento\Framework\Mail\Template\TransportBuilder;
use Magento\Framework\App\Area;
use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Store\Model\ScopeInterface;
use Magento\Sales\Model\Order;

class OrderReviewSave extends Action
{
    /**
     * @var OrderReview
     */
    protected $_orderReview;

    /**
     * @var Order
     */
    protected $order;

    /**
     * Order Review Save Constructor
     *
     * @param PageFactory $resultPageFactory
     * @param Context $context
     * @param OrderReviewFactory $orderReview
     * @param CustomerSession $customer
     * @param StoreManagerInterface $storeManager
     * @param Seller $storeDetails
     * @param ForwardFactory $resultForwardFactory
     * @param Sellerorder $sellerorder
     * @param Data $dataHelper
     * @param OrderRepositoryInterface $orderRepository
     * @param OrderCommentSender $orderCommentSender
     * @param CollectionFactory $sellerorderCollectionFactory
     * @param StateInterface $inlineTranslation
     * @param TransportBuilder $transportBuilder
     * @param ScopeConfigInterface $scopeConfig
     * @param Order $order
     */
    public function __construct(
        PageFactory              $resultPageFactory,
        Context                  $context,
        OrderReviewFactory       $orderReview,
        CustomerSession          $customer,
        StoreManagerInterface    $storeManager,
        Seller                   $storeDetails,
        ForwardFactory           $resultForwardFactory,
        Sellerorder              $sellerorder,
        Data                     $dataHelper,
        OrderRepositoryInterface $orderRepository,
        OrderCommentSender       $orderCommentSender,
        CollectionFactory        $sellerorderCollectionFactory,
        StateInterface           $inlineTranslation,
        TransportBuilder         $transportBuilder,
        ScopeConfigInterface     $scopeConfig,
        Order $order
    ) {
        $this->_orderReview = $orderReview;
        $this->order = $order;
        $this->customer = $customer;
        $this->_sellerorder = $sellerorder;
        $this->storeManager = $storeManager;
        $this->dataHelper = $dataHelper;
        $this->storeDetails = $storeDetails;
        $this->resultForwardFactory = $resultForwardFactory;
        $this->orderRepository = $orderRepository;
        $this->orderCommentSender = $orderCommentSender;
        $this->sellerOrderCollectionFactory = $sellerorderCollectionFactory;
        $this->inlineTranslation = $inlineTranslation;
        $this->transportBuilder = $transportBuilder;
        $this->scopeConfig = $scopeConfig;
        $this->resultPageFactory = $resultPageFactory;

        parent::__construct($context);
    }

    public function execute()
    {
        $data = $this->getRequest()->getParams();
        $resultRedirect = $this->resultRedirectFactory->create();
        $resultRedirect->setPath('sales/order/history');
        if (!isset($data['order_id'])) {
            $this->messageManager->addErrorMessage(__('Identificação do pedido inválido. Avaliação não foi salva.'));
            return $resultRedirect;
        }
        $data['question_1_raking'] = $data['or_question_1'];
        $data['question_2_raking'] = $data['or_question_2'];
        $data['question_3_raking'] = $data['or_question_3'];
        $data['comment'] = $data['or_comment'];
        $data['created_at'] = date('Y-m-d H:i:s');
        $orderReview = $this->_orderReview->create();
        $orderReview->setData($data);
        if ($orderReview->save()) {
            $order = $this->order->load($data['order_id']);
            $this->SendEmailToAdmin($order);
            $this->messageManager->addSuccessMessage(__('Avaliação e notificação enviadas com sucesso.'));
        } else {
            $this->messageManager->addErrorMessage(__('Avaliação não foi salva.'));
        }

        return $resultRedirect;
    }

    /**
     * Send email notification to admin
     *
     * @param $order
     * @param $comment
     * @return void
     */
    protected function SendEmailToAdmin($order)
    {
        try {
            $adminEmail = $this->scopeConfig->getValue('sportico/general/notify_reverse_transactions_mail', ScopeInterface::SCOPE_STORE);
            if (!$adminEmail) {
                $this->messageManager->addErrorMessage(__('Error sending email notification, admin email is not configured'));
                return false;
            }

            $templateOptions = array('area' => Area::AREA_FRONTEND, 'store' => $this->storeManager->getStore()->getId());
            $templateVars = array(
                'store' => $this->storeManager->getStore(),
                'store_name' => $this->storeManager->getStore()->getName(),
                'receiver_name' => $order->getCustomerFirstname(),
                'order_number' => $order->getIncrementId(),
                'order_url' => $this->_url->getUrl('sales/order/view', ['order_id' => $order->getId()])
            );

            $senderEmail = $this->scopeConfig->getValue('trans_email/ident_general/email', ScopeInterface::SCOPE_STORE);
            $senderName = $this->scopeConfig->getValue('trans_email/ident_general/name', ScopeInterface::SCOPE_STORE);
            $from = ['email' => $senderEmail, 'name' => $senderName];
            $this->inlineTranslation->suspend();


            $to = [$adminEmail];

            $templateId = $this->scopeConfig->getValue('purpletree_marketplace/general/order_message_for_admin', ScopeInterface::SCOPE_STORE, $this->storeManager->getStore()->getId());
            $transport = $this->transportBuilder->setTemplateIdentifier($templateId)->setTemplateOptions($templateOptions)
                ->setTemplateVars($templateVars)
                ->setFrom($from)
                ->addTo($to)
                ->getTransport();
            $transport->sendMessage();
            $this->inlineTranslation->resume();

        } catch (Exception $e) {
            $this->messageManager->addErrorMessage(__('Error sending email notification'));
        }

        return $this->resultPageFactory->create();
    }
}


